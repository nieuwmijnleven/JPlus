plugins {
    id 'java'
    id 'antlr'
}

group = 'jplus'
version = 'mvp'

repositories {
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.12.0'
    implementation 'org.antlr:antlr4-runtime:4.12.0'
    implementation 'com.google.googlejavaformat:google-java-format:1.28.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

tasks.named('generateGrammarSource', AntlrTask).configure {
    arguments += ['-visitor', '-package', 'jplus.base']
    outputDirectory = file("src/main/antlr/generated-src/jplus/base")
}

sourceSets {
    main {
        java {
            srcDirs += "src/main/antlr/generated-src"
        }
    }
}

jar {
    archiveBaseName.set('jplus')
    archiveVersion.set('')
    manifest {
        attributes(
                'Main-Class' : 'jplus.main.Main'
        )
    }
}

task run(type: JavaExec) {
    group = 'application'
    description='Runs with arguments'
    mainClass.set('jplus.main.Main')
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('args')) {
        args = project.property('args').split() as List<String>
    }
    jvmArgs += [
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED'
    ]
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:build')) {
        tasks.named('generateGrammarSource').configure {
            enabled = false
        }
        tasks.named('generateTestGrammarSource').configure {
            enabled = false
        }
    } else if (taskGraph.hasTask(':app:run')) {
        tasks.named('generateGrammarSource').configure {
            enabled = false
        }
    } else if (taskGraph.hasTask(':app:test')) {
        tasks.named('generateGrammarSource').configure {
            enabled = false
        }
        tasks.named('generateTestGrammarSource').configure {
            enabled = false
        }
    }
}

test {
    useJUnitPlatform()
    jvmArgs += [
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED'
    ]
}
